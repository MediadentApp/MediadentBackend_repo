const request = require('supertest');
const mongoose = require('mongoose');
const app = require('../src/app.js'); // Path to your Express app
const { MongoMemoryServer } = require('mongodb-memory-server');

// Start an in-memory MongoDB instance for testing
let mongoServer;

// Set up before all tests
beforeAll(async () => {
  mongoServer = await MongoMemoryServer.create();
  const uri = mongoServer.getUri();
  mongoose.connect(uri).then(() => console.log('mongodb instance created for test'));
});

// Clean up after each test
afterEach(async () => {
  await mongoose.connection.db.dropDatabase();
});

// Close the in-memory database and Mongo connection
afterAll(async () => {
  await mongoose.disconnect();
  await mongoServer.stop();
});

// Tests for user API endpoints
describe('User API Tests', () => {

  it('should create a new user', async () => {
    const res = await request(app)
      .post('/api/v1/users')
      .send({
        firstName: 'John',
        lastName: 'Doe',
        email: 'johndoe@example.com',
        password: '12345678',
      });

    expect(res.statusCode).toEqual(201);
    expect(res.body).toHaveProperty('id');
    expect(res.body.email).toBe('johndoe@example.com');
  });

  it('should not create a user with invalid data', async () => {
    const res = await request(app)
      .post('/api/v1/users')
      .send({
        email: 'invalidemail', // Invalid email
        password: '123', // Weak password
      });

    expect(res.statusCode).toEqual(400);
    expect(res.body).toHaveProperty('error');
  });

  it('should fetch all users', async () => {
    // First, create a user
    await request(app)
      .post('/api/v1/users')
      .send({
        firstName: 'John',
        lastName: 'Doe',
        email: 'johndoe@example.com',
        password: '12345678',
      });

    // Then fetch all users
    const res = await request(app).get('/api/v1/users');

    expect(res.statusCode).toEqual(200);
    expect(res.body).toBeInstanceOf(Array);
    expect(res.body.length).toBe(1); // Should return one user
  });
});
